var Stats = function() {
    // Helper function to add a panel to the container
    function addPanel(panel) {
        container.appendChild(panel.dom);
        return panel;
    }

    // Helper function to show a specific panel by index
    function showPanel(index) {
        for (var i = 0; i < container.children.length; i++) {
            container.children[i].style.display = (i === index) ? "block" : "none";
        }
        currentPanel = index;
    }

    var currentPanel = 0;
    var container = document.createElement("div");
    container.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
    
    container.addEventListener("click", function(event) {
        event.preventDefault();
        showPanel(++currentPanel % container.children.length);
    }, false);

    var startTime = (performance || Date).now();
    var prevTime = startTime;
    var frames = 0;

    var fpsPanel = addPanel(new Stats.Panel("FPS", "#0ff", "#002"));
    var msPanel = addPanel(new Stats.Panel("MS", "#0f0", "#020"));
    var memPanel;

    if (self.performance && self.performance.memory) {
        memPanel = addPanel(new Stats.Panel("MB", "#f08", "#201"));
    }

    showPanel(0);

    return {
        REVISION: 16,
        dom: container,
        addPanel: addPanel,
        showPanel: showPanel,
        begin: function() {
            startTime = (performance || Date).now();
        },
        end: function() {
            frames++;
            var endTime = (performance || Date).now();
            msPanel.update(endTime - startTime, 200);

            if (endTime > prevTime + 1000) {
                fpsPanel.update((1000 * frames) / (endTime - prevTime), 100);
                prevTime = endTime;
                frames = 0;

                if (memPanel) {
                    var memory = performance.memory;
                    memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);
                }
            }
            return endTime;
        },
        update: function() {
            startTime = this.end();
        },
        domElement: container,
        setMode: showPanel
    };
};

Stats.Panel = function(name, fgColor, bgColor) {
    var min = Infinity;
    var max = 0;
    var round = Math.round;
    var scale = round(window.devicePixelRatio || 1);

    var width = 80 * scale;
    var height = 48 * scale;
    var textX = 3 * scale;
    var textY = 2 * scale;
    var graphX = 3 * scale;
    var graphY = 15 * scale;
    var graphWidth = 74 * scale;
    var graphHeight = 30 * scale;

    var canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    canvas.style.cssText = "width:80px;height:48px";

    var context = canvas.getContext("2d");
    context.font = "bold " + 9 * scale + "px Helvetica,Arial,sans-serif";
    context.textBaseline = "top";

    context.fillStyle = bgColor;
    context.fillRect(0, 0, width, height);

    context.fillStyle = fgColor;
    context.fillText(name, textX, textY);
    context.fillRect(graphX, graphY, graphWidth, graphHeight);

    context.fillStyle = bgColor;
    context.globalAlpha = 0.9;
    context.fillRect(graphX, graphY, graphWidth, graphHeight);

    return {
        dom: canvas,
        update: function(value, maxValue) {
            min = Math.min(min, value);
            max = Math.max(max, value);

            context.fillStyle = bgColor;
            context.globalAlpha = 1;
            context.fillRect(0, 0, width, graphY);

            context.fillStyle = fgColor;
            context.fillText(round(value) + " " + name + " (" + round(min) + "-" + round(max) + ")", textX, textY);

            context.drawImage(canvas, graphX + scale, graphY, graphWidth - scale, graphHeight, graphX, graphY, graphWidth - scale, graphHeight);

            context.fillRect(graphX + graphWidth - scale, graphY, scale, graphHeight);
            context.fillStyle = bgColor;
            context.globalAlpha = 0.9;
            context.fillRect(graphX + graphWidth - scale, graphY, scale, round((1 - value / maxValue) * graphHeight));
        }
    };
};

if (typeof module === "object") {
    module.exports = Stats;
}
